<% layout('layout') %>
<% layout('layout') %>
    <head>
        <style>
            .card.keyPlain {
                position: relative;
                align-items: start;
                padding: 20px;
                height: 100px;
                justify-content: space-between;
            }
            .graphIcon {
                position: absolute;
                right: 10px;
                top: 10px;
                color: var(--shade1);
            }
            .card.key p {
                line-height: 1.3em;
            }
            .keyT {
                font-size: 1.4vw;
                font-weight: 500;
                color: var(--shade5)
            }
            .keyL {
                font-size: 0.9vw;
                font-weight: 400;
                line-height: 1.5vw;
            }
            .clrd {
                color: white;
                position: relative;
                max-width: 24%;
            }
            .clrd .keyT {
                font-size: 24px;
            }
            .clrd p {
                color: white;
                font-size: 16px;
            }
            label {
                margin-top: 10px;
            }
.clrd:nth-child(1) { background-color: var(--shade1); }
.clrd:nth-child(2) { background-color: var(--shade5); }
.clrd:nth-child(3) { background-color: var(--shade7); }
.clrd:nth-child(4) { background-color: var(--shade9); }
.clrd:nth-child(5) { background-color: var(--shade1); }
.clrd:nth-child(6) { background-color: var(--shade5); }
.clrd:nth-child(7) { background-color: var(--shade8); }
    /* Add this to your existing styles */
    .overlapping-images-container {
        position: relative;
        display: inline-block;
        /* Set a height and width to prevent the table cell from collapsing */
        width: 60%; /* Adjust as needed */
        height: 30px; /* Adjust based on image size */
    }

    .member-photo {
        position: absolute;
        top: 0;
        left: 0;
        z-index: 1; /* Ensures images are layered */
        /* Use the custom property to shift each image */
        transform: translate(calc(var(--i) * 20px), 0); /* Example: shifts 15px to the right for each image */
        /* Or for a more diagonal overlap: */
        /* transform: translate(calc(var(--i) * 15px), calc(var(--i) * 5px)); */
    }
        .more-members-badge {
        position: absolute;
        top: 0;
        left: 0;
        transform: translateX(calc(var(--i) * 15px)); /* Position it like an image */
        z-index: 2; /* Place badge on top of last image */
        display: flex;
        align-items: center;
        height: 100%;
        font-weight: 400;
        background: transparent; /* Match background for seamless look */
        margin-left: 30px;
        color: green;
    }

        </style>
    </head>
    

        <div class="head">
            <div class="ctrl left gap20">
                <p class="title"><%= titlePage %></p>


            </div>
            <div class="ctrl right">
                <div class="selectBar hidden">
                    <select name="" id="">
                        <option value="">Filter by Purok</option>
                        <option value="">Dike Street</option>
                        <option value="">Cantarilla</option>
                        <option value="">Bagong Daan</option>
                        <option value="">Shortcut</option>
                        <option value="">Highway</option>
                        <option value="">Perigola</option>
                    </select>
                </div>
                <div class="selectBar">
                    <i class="fas fa-filter inline w15"></i>
                    <select id="purokSelector" class="">
                        <option value="" disabled selected>Filter by Purok</option>
                        <option value="/fml">All Purok</option>
                        <option value="/fmlD">Dike</option>
                        <option value="/fmlS">Shortcut</option>
                        <option value="/fmlC">Cantarilla</option>
                        <option value="/fmlH">Maharlika Highway</option>
                        <option value="/fmlB">Bagong Daan</option>
                        <option value="/fmlP">Perigola</option>
                    </select>
                </div>
                <div class="searchBar">
                    <input type="search" id="univ">
                    <i class="fas fa-search"></i>
                </div>
                <a href="/export-residents" class="nav hidden">
                    <i class="fa-solid fa-download"></i>
                    Export Copy
                </a>
            </div>
            
        </div>

        
        <div class="section justifyStart">
            <div class="card keyPlain clrd abstractBG">
                <a href="" class="nav cnav disabled marginBottom15 absolute right10" style="opacity: 0.1; transform: scale(2); bottom: -10px;"><i class="fas fa-user-friends"></i></a>
                <p class="keyT"><%= totalFamilies %></p>
                <p class="keyL">
                    Total Families
                </p>
            </div>
            <div class="card keyPlain clrd abstractBG">
                <a href="" class="nav cnav disabled marginBottom15 absolute right10" style="opacity: 0.1; transform: scale(2); bottom: -10px;"><i class="fas fa-square-root-variable"></i></a>
                <p class="keyT"><%= avgMembersPerFamily %></p>
                <p class="keyL">
                    Average Members
                </p>
            </div>
            <div class="card keyPlain clrd abstractBG">
                <a href="" class="nav cnav disabled marginBottom15 absolute right10" style="opacity: 0.1; transform: scale(2); bottom: -10px;"><i class="fas fa-hand-holding-heart"></i></a>
                <p class="keyT"><%= totalIndigent %></p>
                <p class="keyL">
                    Indigent Families
                </p>
            </div>
            <div class="card keyPlain clrd abstractBG">
                <a href="" class="nav cnav disabled marginBottom15 absolute right10" style="opacity: 0.1; transform: scale(2); bottom: -10px;"><i class="fas fa-hands-holding"></i></a>
                <p class="keyT"><%= totalLowIncome  %></p>
                <p class="keyL">
                    Low Income Families
                </p>
            </div>
            <div class="card keyPlain clrd abstractBG">
                <a href="" class="nav cnav disabled marginBottom15 absolute right10" style="opacity: 0.1; transform: scale(2); bottom: -10px;"><i class="fas fa-gem"></i></a>
                <p class="keyT"><%= totalNonIndigent  %></p>
                <p class="keyL">
                    Non-Indigent Families
                </p>
            </div>
        </div>
            <script>
            document.addEventListener("DOMContentLoaded", function() {
                const purokSelector = document.getElementById("purokSelector");

                if (purokSelector) { // Check if the selector exists
                    purokSelector.addEventListener("change", function() {
                        const selectedValue = this.value; // Get the 'value' of the selected option
                        if (selectedValue) { // Ensure a valid option was selected (not the disabled one)
                            window.location.href = selectedValue; // Redirect the browser to the selected URL
                        }
                    });
                }
            });
        </script>


        


        <div class="main overflow-y1 bgSoft borderRadius15" style="height: 60% !important;">

        

<script>
    document.getElementById('newBtn').addEventListener('click', function() {
    var newCard = document.getElementById('newCard');
    if (newCard.classList.contains('unseen')) {
        newCard.classList.remove('unseen');
        newCard.classList.add('seen');
    }
});

document.getElementById('closeBtn').addEventListener('click', function() {
    var newCard = document.getElementById('newCard');
    if (newCard.classList.contains('seen')) {
        newCard.classList.remove('seen');
        newCard.classList.add('unseen');
    }
});

</script>
            <div class="section tableCard">
                <p class="p14" id="noRecords" style="display: none;">No Records</p>
                
                <table id="dirTable">
                    <thead>
                        <tr>
                            <th class="textCenter" style="width: 5%;">#</th>
                            <th class="width25">Family Head</th>
                            <th class="width10">House No.</th>
                            <th class="width10">Living Condition</th>
                            <th class="width35 textCenter">Total Members</th>
                            <th class="width15 textCenter">Action</th>
                        </tr>
                    </thead>
                    <tbody>
                        <% if (families.length > 0) { %>
                            <% families.forEach((family, index) => { %>
                                <tr>
                                    <td class="textCenter"><%= index + 1 %></td>
                                    <td><%= family.familyHead %></td>
                                    <td><%= family.houseNo %> <%= family.purok %></td>
                                    <td><%= family.poverty %></td>
                                    <td class="">
                                        <div class="height0 justifyStart alignCenter gap10">
                                            <div class="overlapping-images-container justifyCenter alignCenter flex">
                                                <% family.members.forEach((member, memberIndex) => { %>
                                                    <% if (memberIndex < 5) { %>
                                                        <img src="<%= member.photo || '/images/profile.jpg' %>" alt="" class="inline h25 w25 borderRadius500 borderPrimary member-photo" style="--i: <%= memberIndex %>;">
                                                    <% } %>
                                                <% }); %>
                                                <% if (family.members.length > 5) { %>
                                                    <span class="more-members-badge member-photo height100" style="--i: 5;">
                                                        &nbsp; &nbsp; +<%= family.members.length - 5 %> more
                                                    </span>
                                                <% } %>
                                            </div>
                                            <%= family.totalMembers %> Members
                                        </div>
                                    </td>
                                    <td class="tdCtrl">
                                            <a href="/hshView/<%= family.householdId %>" class="nav"><i class="fas fa-eye"></i> See Details</a></td>
                                </tr>
                            <% }); %>
                        <% } else { %>
                            <tr>
                                <td colspan="6" class="text-center">No families found.</td>
                            </tr>
                        <% } %>
                    </tbody>
                </table>
                


    </div>
</div>
<div class="sub height0 row flex">
    <div class="ctrl left width20">
        <span id="totalRecords" class="totalRecords"></span>
    </div>
    <div class="ctrl right width80">
        <p>
            Display Per Page:
        </p>
        <div class="selectBar" style="width: 70px;"> 
            <select id="rowsPerPage" onchange="updateRowsPerPage()" style="width: 100px">
                <option value="10">10</option>
                <option value="20">20</option>
                <option value="50">50</option>
                <option value="100">100</option>
                <option value="1000000000000">All</option>
            </select>
        </div>
        <div class="pagination" id="pagination"></div>
    </div>
</div>            

            
    <script>
        const showHideButtons = document.querySelectorAll('.showPass');
        
        showHideButtons.forEach(button => {
            button.addEventListener('click', function() {
                const passwordInput = button.previousElementSibling;

                if (passwordInput.type === 'password') {
                    passwordInput.type = 'text';
                    button.textContent = 'hide';
                } else {
                    passwordInput.type = 'password';
                    button.textContent = 'show';
                }
            });
        });
    </script>
    <script>
        function enforceNumericInput(event) {
            event.target.value = event.target.value.replace(/[^0-9]/g, '').slice(0, 11);
        }

        document.addEventListener('DOMContentLoaded', () => {
            const phoneInputs = document.querySelectorAll('.phone');
            phoneInputs.forEach(input => {
                input.addEventListener('input', enforceNumericInput);
            });
        });
    </script>
    
<script>document.addEventListener("DOMContentLoaded", function() {
    const dirTable = document.getElementById("dirTable");
    const tableBody = dirTable.getElementsByTagName("tbody")[0];
    const paginationContainer = document.getElementById("pagination");
    const rowsPerPageSelect = document.getElementById("rowsPerPage");
    const totalRecordsLabel = document.getElementById("totalRecords");
    const searchInput = document.getElementById("univ");
    const noRecordsMessage = document.getElementById("noRecords");
    const subDiv = document.querySelector(".sub");

    let currentPage = 1;
    let rowsPerPage = parseInt(rowsPerPageSelect.value);
    let allRows = Array.from(tableBody.rows);
    let filteredRows = allRows;

    function renderTable() {
        const start = (currentPage - 1) * rowsPerPage;
        const end = start + rowsPerPage;

        if (filteredRows.length === 0) {
            dirTable.style.display = "none";
            noRecordsMessage.style.display = "block";
        } else {
            dirTable.style.display = "table";
            noRecordsMessage.style.display = "none";
        }

        if (filteredRows.length <= 5) {
            subDiv.style.display = "none";
        } else {
            subDiv.style.display = "flex";
        }

        allRows.forEach(row => (row.style.display = "none"));
        filteredRows.slice(start, end).forEach(row => (row.style.display = ""));

        totalRecordsLabel.innerText = `Total Records: ${filteredRows.length}`;
        renderPagination(filteredRows.length);
    }
 
function renderPagination(totalRows) {
    paginationContainer.innerHTML = "";

    if (searchInput.value.trim()) return;

    const totalPages = Math.ceil(totalRows / rowsPerPage);
    if (totalPages <= 1) return;

    // Previous Button
    const prevButton = document.createElement("button");
    prevButton.innerHTML = "« Previous";
    prevButton.disabled = currentPage === 1;
    prevButton.onclick = () => {
        currentPage--;
        renderTable();
        renderPagination(totalRows); // Re-render pagination after page change
    };
    paginationContainer.appendChild(prevButton);

    // --- New Logic for displaying a limited number of page buttons ---

    // Display all buttons if total pages are 7 or less
    if (totalPages <= 7) {
        for (let i = 1; i <= totalPages; i++) {
            const pageButton = document.createElement("button");
            pageButton.innerHTML = i;
            pageButton.className = i === currentPage ? "active" : "";
            pageButton.onclick = () => {
                currentPage = i;
                renderTable();
                renderPagination(totalRows);
            };
            paginationContainer.appendChild(pageButton);
        }
    } else { // Display condensed pagination for more than 7 pages
        const startPages = [1, 2, 3];
        const endPages = [totalPages - 2, totalPages - 1, totalPages];
        const middlePages = [currentPage - 1, currentPage, currentPage + 1];

        // Function to create a page button
        const createPageButton = (page, isEllipsis = false) => {
            const btn = document.createElement("button");
            btn.innerHTML = isEllipsis ? "..." : page;
            btn.disabled = isEllipsis;
            if (!isEllipsis) {
                btn.className = page === currentPage ? "active" : "";
                btn.onclick = () => {
                    currentPage = page;
                    renderTable();
                    renderPagination(totalRows);
                };
            }
            return btn;
        };

        // Add first pages
        for (const page of startPages) {
            if (page <= totalPages) {
                paginationContainer.appendChild(createPageButton(page));
            }
        }
        
        // Add ellipsis if current page is not near the start
        if (currentPage > 4) {
            paginationContainer.appendChild(createPageButton("...", true));
        }

        // Add middle pages (current page and its neighbors)
        if (currentPage > 3 && currentPage < totalPages - 2) {
            for (const page of middlePages) {
                if (page > 0 && page <= totalPages) {
                    paginationContainer.appendChild(createPageButton(page));
                }
            }
        }

        // Add ellipsis if current page is not near the end
        if (currentPage < totalPages - 3) {
            paginationContainer.appendChild(createPageButton("...", true));
        }

        // Add last pages
        for (const page of endPages) {
            if (page > 3) {
                paginationContainer.appendChild(createPageButton(page));
            }
        }
    }

    // Next Button
    const nextButton = document.createElement("button");
    nextButton.innerHTML = "Next »";
    nextButton.disabled = currentPage === totalPages;
    nextButton.onclick = () => {
        currentPage++;
        renderTable();
        renderPagination(totalRows); // Re-render pagination after page change
    };
    paginationContainer.appendChild(nextButton);
}

    function updateRowsPerPage() {
        rowsPerPage = parseInt(rowsPerPageSelect.value);
        currentPage = 1;
        renderTable();
    }

    function searchTable() {
        const query = searchInput.value.toLowerCase().trim();
        filteredRows = allRows.filter(row =>
            Array.from(row.cells).some(cell => cell.textContent.toLowerCase().includes(query))
        );

        currentPage = 1;
        //rowsPerPageSelect.style.display = query ? "none" : "block";
        renderTable();
    }

    rowsPerPageSelect.addEventListener("change", updateRowsPerPage);
    searchInput.addEventListener("input", searchTable);
    renderTable();
});
</script>

<script>
    function toggleFamilyHead() {
        const familyRole = document.getElementById("familyRole").value;
        const inputFHead = document.getElementById("inputFHead");

        if (familyRole === "Member") {
            inputFHead.classList.remove("hidden");
        } else {
            inputFHead.classList.add("hidden");
        }
    }

    function toggleDisability() {
        const priority = document.getElementById("priority").value;
        const disabilityField = document.getElementById("disabilityField");

        if (priority === "PWD") {
            disabilityField.classList.remove("hidden");
        } else {
            disabilityField.classList.add("hidden");
        }
    }
</script>