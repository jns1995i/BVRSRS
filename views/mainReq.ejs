<% layout('layout') %>
<head>
    <style>
        .mainf {
            gap: 10px;
            display: flex;
        }
    </style>
</head>


        <div class="height10">
            <div class="height0 width100">
                <div class="ctrl left">
                    <p class="size30 str500">Request Document</p>
                </div>
                <div class="ctrl">
                </div>
                <div class="ctrl right">
                </div>
            </div>
        </div>
        
            <div class="padding20 width100 bgWhite blockX overflow-y1 relative" style="border: 10px solid rgb(255, 255, 255);">
                        
                <form action="/reqDocument" method="POST" enctype="application/x-www-form-urlencoded" class="height0 padding25 darkShadow  relative width55">
                    
                        
                        <div class="height0 col marginBottom20">
                            <div class="field">
                                <label for="">Search Resident</label>
                                <input type="search" id="searchResident">
                            </div>
                        </div>

                        <div class="height0 wrap gap10">
                            <button class="nav" style="max-width: fit-content;" id="item">Resident Name</button>
                        </div>
                        
                        <div class="height0 col marginBottom20">
                            <div class="field">
                                <label for="">Complete Name</label>
                                <input type="hidden" name="requestBy" id="residentValue">
                                <input type="text" id="residentInput" value="">
                            </div>
                        </div>

                    <div class="fieldsetContainer height0 width100 col" id="fieldsetContainer">

                        <fieldset class="marginBottom20 abstractBG border0 darkShadow padding25 borderRadius10 width100">
                            <div class="justifyBetween marginBottom5" id="removeBtnContainer2">
                                <p class="size20 str400 white width0 padding5"><i class="fas fa-file-alt size16"></i> Document</p>
                                <button type="button" class="remove-btn nav fnav width0 border0 size12 dnav">Remove</button>
                            </div>
                            
                            <div class="gap10 bgWhite borderRadius10 padding10">
                                <div class="field">
                                    <label>Type</label>
                                    <div class="selectBar">
                                        <select name="type[]" required class="docType">
                                            <option value="" selected disabled>Select</option>
                                            <option value="Barangay Clearance">Barangay Clearance</option>
                                            <option value="Barangay Indigency">Barangay Indigency</option>
                                            <option value="Good Moral">Good Moral</option>
                                            <option value="Certificate of Residency">Certificate of Residency</option>
                                        </select>
                                    </div>
                                </div>
                                <div class="field">
                                    <label>Purpose</label>
                                    <div class="selectBar">
                                        <select name="purpose[]" required>
                                            <option value="ANY LEGAL">ANY LEGAL</option>
                                            <option value="BURIAL ASSISTANCE">BURIAL ASSISTANCE</option>
                                            <option value="EDUCATIONAL ASSISTANCE">EDUCATIONAL ASSISTANCE</option>
                                            <option value="FINANCIAL ASSISTANCE">FINANCIAL ASSISTANCE</option>
                                            <option value="MEDICAL ASSISTANCE">MEDICAL ASSISTANCE</option>
                                            <option value="BANK TRANSACTION">BANK TRANSACTION</option>
                                            <option value="BOARD EXAM">BOARD EXAM</option>
                                            <option value="CELCOR/ELECTRIC METER">CELCOR/ELECTRIC METER</option>
                                            <option value="LCR">LCR</option>
                                            <option value="LEGALIZATION">LEGALIZATION</option>
                                            <option value="LOCAL EMPLOYMENT">LOCAL EMPLOYMENT</option>
                                            <option value="PHILHEALTH">PHILHEALTH</option>
                                            <option value="POLICE CLEARANCE">POLICE CLEARANCE</option>
                                            <option value="PRIME WATER">PRIME WATER</option>
                                            <option value="SCHOOL REQUIREMENT">SCHOOL REQUIREMENT</option>
                                            <option value="SENIOR CITIZEN">SENIOR CITIZEN</option>
                                            <option value="SOLO PARENT PWD">SOLO PARENT PWD</option>
                                            <option value="TRAVEL ABROAD">TRAVEL ABROAD</option>
                                            <option value="XXX">XXX</option>
                                        </select>
                                    </div>
                                </div>
                                <div class="field">
                                    <label>No. Copies</label>
                                    <div class="selectBar">
                                        <select name="qty[]" required>
                                            <option value="" selected disabled>Select</option>
                                            <option value="1">1</option>
                                            <option value="2">2</option>
                                            <option value="3">3</option>
                                        </select>
                                    </div>
                                </div>
                                <script>
                                    document.addEventListener("DOMContentLoaded", function () {
    const docTypeSelect = document.querySelector(".docType");
    const purposeSelect = document.querySelector("select[name='purpose[]']");

    const defaultPurposes = [
        "ANY LEGAL", "BURIAL ASSISTANCE", "EDUCATIONAL ASSISTANCE", "FINANCIAL ASSISTANCE",
        "MEDICAL ASSISTANCE", "BANK TRANSACTION", "BOARD EXAM", "CELCOR/ELECTRIC METER",
        "LCR", "LEGALIZATION", "LOCAL EMPLOYMENT", "PHILHEALTH", "POLICE CLEARANCE",
        "PRIME WATER", "SCHOOL REQUIREMENT", "SENIOR CITIZEN", "SOLO PARENT PWD",
        "TRAVEL ABROAD", "XXX"
    ];

    const indigencyPurposes = [
        "Burial Assistance",
        "Educational Assistance",
        "Financial Assistance",
        "Medical Assistance",
        "PhilHealth",
        "Senior Citizen",
        "Solo Parent / PWD",
        "School Requirement"
    ];

    function updatePurposeOptions() {
        const selectedType = docTypeSelect.value;
        purposeSelect.innerHTML = ""; // Clear existing options

        let purposes = defaultPurposes; // Default list

        if (selectedType === "Good Moral" || selectedType === "Certification") {
            purposes = ["ANY LEGAL"];
        } else if (selectedType === "Barangay Indigency") {
            purposes = indigencyPurposes;
        }

        // Add options to select element
        let defaultOption = document.createElement("option");
        defaultOption.value = "";
        defaultOption.textContent = "Select";
        defaultOption.disabled = true;
        defaultOption.selected = true;
        purposeSelect.appendChild(defaultOption);

        purposes.forEach(purpose => {
            let option = document.createElement("option");
            option.value = purpose;
            option.textContent = purpose;
            purposeSelect.appendChild(option);
        });
    }

    // Event listener for document type change
    docTypeSelect.addEventListener("change", updatePurposeOptions);

    // Initialize options on page load
    updatePurposeOptions();
});

                                </script>
                            </div>
                            <div class="height0 col alignStart hidden" id="purposeCard">
                                <label for="">Remarks: Indicate here the content (Optional)</label>
                                <textarea placeholder="e.g. This is to certify that Juan dela Cruz is a solo parent." name="remarks[]"></textarea>
                            </div>                        
                        </fieldset>

                                                    
                                    
                    </div>

                    <div id="formMessage" class="form-message height0 size12 colorPrimary justifyCenter borderRadius10" style="background-color: rgb(255, 228, 228); color: rgb(80, 0, 0);"></div>

                    <div id="limitM" class="limitM marginBottom5 height0 size12 colorPrimary justifyCenter borderRadius10 borderPrimary" style="background-color: rgba(246, 255, 247, 0.87);">
                        <div class="height0 padding10 size14 str500"> You can only request not more than a five (5) items</div>
                    </div>
                        
                    <div class="paddingInline5 height0">
                        <div class="height0 justifyBetween padding10 borderRadius10 borderPrimary">
                            <p class="size14 str500">Need More Document?</p>
                            <a href="#" class="nav pnav tnav" id="addBtn"><i class="fas fa-plus inline"></i> Add Additional Document</a>
                        </div>
                    </div>
                            
                    <div class="height0 col alignStart hidden" id="">
                        <label for="">Remarks (Optional)</label>
                        <textarea class="height0 overflow-y1" placeholder="e.g. This is to certify that Juan dela Cruz is a solo parent." name="remarkMain"></textarea>
                    </div> 
                    <br>
                    <div class="noteCard textCenter bgSoft padding15 borderRadius10">
                        TAKE NOTE: Please review all the details carefully before submitting your request. Ensure that all selections and information are correct, as changes may not be allowed after submission.
                    </div>
                    <br>
                    <div class="field height0 marginTop15 width100 alignEnd">
                        <button type="submit" class="nav tnav pnav"><i class="fas fa-check-circle"></i>Submit</button>
                    </div>
                </form>
            </div>
        </div>

    <script>
        document.addEventListener("DOMContentLoaded", function() {
        document.querySelectorAll(".showBtn").forEach(button => {
            button.addEventListener("click", function(event) {
                event.preventDefault(); // Prevent default <a> behavior
    
                let newsCard = this.closest(".newsCard"); // Get parent newsCard
                let details = newsCard.querySelector(".details"); // Get details inside the card
                let icon = this.querySelector("i"); // Get icon inside the button
    
                details.classList.toggle("show"); // Toggle visibility
                
                // Toggle icon class
                if (details.classList.contains("show")) {
                    icon.classList.remove("fa-chevron-down");
                    icon.classList.add("fa-chevron-up");
                } else {
                    icon.classList.remove("fa-chevron-up");
                    icon.classList.add("fa-chevron-down");
                }
            });
        });
    });
    
    </script>
    <script>
document.addEventListener("DOMContentLoaded", function () {
    // Select ALL elements with the class "univ"
    const univInputs = document.querySelectorAll(".univ");
    const newsCards = document.querySelectorAll(".newsCard");
    const notFoundMessage = document.getElementById("notFound");

    function handleFilter(event) {
        // Get the value from the input the user is currently typing in
        const filter = event.target.value.toLowerCase();
        let found = false;

        // If the search field is empty, show all cards and hide "NOT FOUND"
        if (filter === "") {
            newsCards.forEach(card => card.style.display = "block");
            notFoundMessage.style.display = "none";
            return;
        }

        // Hide cards that don't match the filter and show matching ones
        newsCards.forEach(card => {
            if (card.textContent.toLowerCase().includes(filter)) {
                card.style.display = "block";
                found = true;
            } else {
                card.style.display = "none";
            }
        });

        // Show "NOT FOUND" if no matches are found
        notFoundMessage.style.display = found ? "none" : "block";
    }

    // Attach the same filter function to both inputs
    univInputs.forEach(univInput => {
        univInput.addEventListener("input", handleFilter);
    });
});
    </script>
<script>
    document.querySelectorAll('.details').forEach(div => {
    div.innerHTML = div.innerHTML.replace(/(?<!\S)(https?:\/\/[^\s]+|www\.[^\s]+|\b[a-zA-Z0-9.-]+\.(com|net|org|gov|edu|ph)\b)(?!\S)/g, '<a href="http://$1" target="_blank" class="inline blue str500">$1</a>');
});
</script>
<script>
    document.querySelectorAll('.details').forEach(div => {
    div.innerHTML = div.innerHTML.replace(/(^|\s)(#\w+)/g, '$1<span class="green str500">$2</span>');
});
</script>
<script>
document.getElementById("assignBtn").addEventListener("click", function(event) {
    event.preventDefault(); // Prevent default link behavior
    
    let assignCard = document.getElementById("assignDepCard");
    let assignBtn = document.getElementById("assignBtn");

    // Toggle 'active' class
    assignCard.classList.toggle("active");

    // Change button text & icon based on active state
    if (assignCard.classList.contains("active")) {
        assignBtn.innerHTML = '<i class="fas fa-plus"></i>Request Document';
    } else {
        assignBtn.innerHTML = '<i class="fas fa-plus"></i>Request Document';
    }
});

// Hide #assignDepCard when #closeNav is clicked
document.getElementById("closeNav").addEventListener("click", function() {
    let assignCard = document.getElementById("assignDepCard");
    let assignBtn = document.getElementById("assignBtn");

    // Remove 'active' class
    assignCard.classList.remove("active");

    // Reset button text & icon
    assignBtn.innerHTML = '<i class="fas fa-plus"></i>Request Document';
});
</script>


<script>
document.addEventListener("DOMContentLoaded", function () {
    const addBtn = document.getElementById("addBtn");
    const fieldsetContainer = document.getElementById("fieldsetContainer");

    // Function to handle "Certification (Customizable)" selection
    function togglePurposeCard(selectElement) {
        const fieldset = selectElement.closest("fieldset");
        const purposeCard = fieldset.querySelector(".purposeCard");
        const remarksField = fieldset.querySelector(".remarks");

        if (selectElement.value === "Certification") {
            purposeCard.classList.remove("unseen");
            purposeCard.classList.add("seen2");
        } else {
            purposeCard.classList.remove("seen2");
            purposeCard.classList.add("unseen");
        }

        // Ensure remarks field is always visible
        if (remarksField) {
            remarksField.parentElement.classList.remove("unseen");
        }
    }

// Function to check fieldset count and toggle Add button
function checkFieldsetCount() {
    const fieldsets = fieldsetContainer.querySelectorAll("fieldset");
    const limitMessageDiv = document.getElementById("limitM"); // Get the existing div

    if (fieldsets.length >= 5) {
        addBtn.style.display = "none"; // Hide the Add button
        if (limitMessageDiv) { // Ensure the div exists before trying to show it
            limitMessageDiv.classList.remove("hidden"); // Show the limit message
        }
    } else {
        addBtn.style.display = "inline-block"; // Show the Add button (adjust display type as needed)
        if (limitMessageDiv) { // Ensure the div exists before trying to hide it
            limitMessageDiv.classList.add("hidden"); // Hide the limit message
        }
    }
}

    // Function to check if required fields have data
    function isFieldsetValid(fieldset) {
        const requiredFields = fieldset.querySelectorAll("select[required], input[required], textarea[required]");
        return Array.from(requiredFields).every(field => field.value.trim() !== "");
    }

    function checkLastFieldsetBeforeAdding() {
        const fieldsets = fieldsetContainer.querySelectorAll("fieldset");
        const lastFieldset = fieldsets[fieldsets.length - 1]; // Get the last fieldset
        const messageDiv = document.getElementById("formMessage");

        if (isFieldsetValid(lastFieldset)) {
            addBtn.removeAttribute("disabled");
            messageDiv.style.display = "none";
        } else {
            addBtn.setAttribute("disabled", "true");
        }
    }

    // Add event listener to "Add" button
    addBtn.addEventListener("click", function (e) {
        e.preventDefault();

        const fieldsets = fieldsetContainer.querySelectorAll("fieldset");
        const lastFieldset = fieldsets[fieldsets.length - 1];

        // Prevent adding new fieldset if last one is empty
        const messageDiv = document.getElementById("formMessage");

        // Hide the message initially
        messageDiv.style.display = "none";

        if (!isFieldsetValid(lastFieldset)) {
            messageDiv.innerHTML = `<i class="fas fa-exclamation-circle marginLeft5"></i> &nbsp; Please fill in all required fields before adding a new document!`;
            messageDiv.style.display = "flex";
            messageDiv.style.padding = "10px";
            messageDiv.style.marginBottom = "10px";
            messageDiv.style.border = "0.5px solid red";
            return;
        }

        // If valid, make sure the message is hidden
        messageDiv.style.display = "none";

        // Clone the first fieldset as a template
        const firstFieldset = document.querySelector("fieldset");
        if (!firstFieldset) return;

        const newFieldset = firstFieldset.cloneNode(true);

        // Clear values in the cloned fieldset
        newFieldset.querySelectorAll("select, input, textarea").forEach((el) => {
            if (el.tagName === "SELECT") {
                el.selectedIndex = 0;
            } else {
                el.value = "";
            }
        });

        // Ensure remarks field is always visible and cleared
        const remarksField = newFieldset.querySelector(".remarks");
        if (remarksField) {
            remarksField.value = "";
            remarksField.parentElement.classList.remove("unseen");
        }

        // Add remove button event listener
        const removeBtn = newFieldset.querySelector(".remove-btn");
        if (removeBtn) {
            removeBtn.style.display = "flex";
            removeBtn.addEventListener("click", function () {
                newFieldset.remove();
                checkFieldsetCount();
                checkLastFieldsetBeforeAdding();
            });
        }

        // Add event listener for document type
        const newDocType = newFieldset.querySelector(".docType");
        if (newDocType) {
            newDocType.addEventListener("change", function () {
                togglePurposeCard(this);
            });
        }

        // Append new fieldset
        fieldsetContainer.appendChild(newFieldset);

        // Check fieldset count and button state
        checkFieldsetCount();
        checkLastFieldsetBeforeAdding();
    });

    // Ensure the first fieldset can't be removed
    const firstRemoveBtn = document.querySelector(".remove-btn");
    if (firstRemoveBtn) {
        firstRemoveBtn.style.display = "none";
    }

    // Add event listener for document type in the first fieldset
    const firstDocType = document.querySelector(".docType");
    if (firstDocType) {
        firstDocType.addEventListener("change", function () {
            togglePurposeCard(this);
        });
    }

    // Ensure remarks fields are shown on load
    document.querySelectorAll(".remarks").forEach((el) => {
        el.parentElement.classList.remove("unseen");
    });

    // Monitor inputs for validation
    fieldsetContainer.addEventListener("input", checkLastFieldsetBeforeAdding);

    // Initial check on load
    checkFieldsetCount();
    checkLastFieldsetBeforeAdding();
});

                            </script>